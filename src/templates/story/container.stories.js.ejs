import {action} from '@storybook/addon-actions';
import {text} from '@storybook/addon-knobs';
import {storiesOf} from '@storybook/react-native';
import React from 'react';
import {Text} from 'react-native';
import {store} from '../../../src/App';
import CenterView from '../CenterView';
import {Provider, connect} from 'react-redux';
import <%=props.name%>_codebehind, {
  <%=props.name%>State,
} from '../../../src/Screens/<%=props.name%>/<%=props.name%>.codebehind';
import <%=props.name%> from '../../../src/Screens/<%=props.name%>/<%=props.name%>';
import {Auth_Update, <%=props.name%>_Update} from '../../../src/util/actionTypes';
import {AuthState} from '../../../src/Services/Auth/Auth.codebehind';

storiesOf('<%=props.name%>', module)
  //@ts-ignore
  .addDecorator(getStory => <Provider store={store}>{getStory()}</Provider>)
  .add('default state', () => {
    return <<%=props.name%> />;
  })
  .add('loading', () => {
    // you can dispatch the state-to-test for the component
    // ahead of the story
    store.dispatch({
      type: <%=props.name%>_Update,
      payload: {
        ...store.getState().<%=props.name%>,
        VersionNumber: 'CONTRACTOR',
      } as <%=props.name%>State,
    });
    // Containers receive props from connected services
    // we can dispatch an update to the connected services to ahead of the story
    store.dispatch({
      type: Auth_Update,
      payload: {
        ...store.getState().Auth,
        AppMode: 'CONTRACTOR',
      } as AuthState,
    });
    // manipulate the component state
    return <<%=props.name%> />;
  });
