import React from 'react';

import {createStore, applyMiddleware, combineReducers} from 'redux';
import {Provider, connect} from 'react-redux';
import {
  Scene,
  Actions,
  Router,
  Tabs,
  Stack,
  Drawer,
  Modal,
} from 'react-native-router-flux';
//@ts-ignore
import {
  reduxifyNavigator,
  createReactNavigationReduxMiddleware,
  createNavigationReducer,
} from 'react-navigation-redux-helpers';
//@ts-ignore
import thunkMiddleware from 'redux-thunk';
import logger from 'redux-logger';
import {
  SafeAreaView,
  StyleSheet,
  ScrollView,
  View,
  Text,
  StatusBar,
  AsyncStorage,
} from 'react-native';
import {persistStore, persistCombineReducers} from 'redux-persist';

// #### import the application files here
import reducer from './nav-reducer';
import Splash from './Screens/Splash/Splash';
import Splash_codebehind from './Screens/Splash/Splash.codebehind';
import MoreInformation from './Screens/MoreInformation/MoreInformation';
import MoreInformation_codebehind from './Screens/MoreInformation/MoreInformation.codebehind';
import Home from './Screens/Home/Home';
import Home_codebehind from './Screens/Home/Home.codebehind';
import ScreenHeader from './Containers/ScreenHeader/ScreenHeader';
import ScreenHeader_codebehind from './Containers/ScreenHeader/ScreenHeader.codebehind';
import Header from './Containers/Header/Header';
import Header_codebehind from './Containers/Header/Header.codebehind';
import Entity_codebehind from './Services/Entity/Entity.codebehind';
import Auth_codebehind from './Services/Auth/Auth.codebehind';
//!!nextimport

declare const global: {HermesInternal: null | {}};

// #### add the 'Screen''s here to the NavTree
const AppNavigator: any = Actions.create(
  <Scene key="root" hideNavBar swipeEnabled={false} gestureEnabled={false}>
    <Modal key="Splash" initial={true}>
      <Scene initial={true} component={Splash} hideNavBar />
    </Modal>
    <Scene key="MoreInformation" component={MoreInformation} hideNavBar />
    <Tabs
      key="TabHome"
      panHandlers={null}
      backToInitial={false}
      onTabOnPress={() => {
        console.log('Back to initial and also print this');
      }}
      animationEnabled={true}
      duration={3000}
      swipeEnabled
      activeBackgroundColor="#F8F8F8"
      inactiveBackgroundColor="white"
      showLabel={false}>
      <Drawer
        key="Home"
        contentComponent={() => {
          return <View></View>
        }}
        animationEnabled={true}
        drawerWidth={250}
        drawerPosition={'right'}
        swipeEnabled
        hideNavBar
        icon={(focused:any)=> {
          return (
            <View>
              <Text>
                Home
              </Text>
            </View>
          );
        }}>
          <Scene
          initial={true}
          component={Home}
          hideNavBar
          animationEnabled={true}
        />
      </Drawer>
    </Tabs>
    <Scene key='ScreenHeader' component={ScreenHeader} hideNavBar /> 
		<Scene key='Header' component={Header} hideNavBar /> 
		{/*!!nextsceneimport*/}
  </Scene>,
);

// default nav reducer
const initialState = AppNavigator.router.getStateForAction(
  AppNavigator.router.getActionForPathAndParams('splash'),
);
const navReducer = (state = initialState, action: any) => {
  const nextState = AppNavigator.router.getStateForAction(action, state);
  // Simply return the original `state` if `nextState` is null or undefined.
  return nextState || state;
};

// persist config
// https://blog.reactnativecoach.com/the-definitive-guide-to-redux-persist-84738167975
const config: any = {
  key: 'Auth',
  whitelist: ['Auth'],
  storage: AsyncStorage,
  timeout: null, // The code base checks for falsy, so 0 disables
};

// #### Add the codebehind files here
let Splash_controller = new Splash_codebehind();
let MoreInformation_controller = new MoreInformation_codebehind();
let Home_controller = new Home_codebehind();
let ScreenHeader_controller = new ScreenHeader_codebehind();
let Header_controller = new Header_codebehind();
let Entity_controller = new Entity_codebehind();
let Auth_controller = new Auth_codebehind();
//!!nextcontroller

const appReducer = persistCombineReducers(config, {
  nav: navReducer,
  Splash: Splash_controller.reducer,
  MoreInformation: MoreInformation_controller.reducer,
  Home: Home_controller.reducer,
  ScreenHeader: ScreenHeader_controller.reducer,
		Header: Header_controller.reducer,
		Entity: Entity_controller.reducer,
		Auth: Auth_controller.reducer,
		//!!nextreducer
});
const mapStateToProps = (state: any) => {
  return {
    state: state.nav,
    Splash: Splash_controller.reducer,
    MoreInformation: MoreInformation_controller.reducer,
    Home: Home_controller.reducer,
    ScreenHeader: ScreenHeader_controller.reducer,
		Header: Header_controller.reducer,
		Entity: Entity_controller.reducer,
		Auth: Auth_controller.reducer,
		//!!nextprop
  };
};

const middleware = createReactNavigationReduxMiddleware(
  'root',
  (state: any) => state.nav,
);
const ReduxNavigator = reduxifyNavigator(AppNavigator, 'root');

const ReduxRouter: any = connect(mapStateToProps)(Router as any);

const store = createStore(
  appReducer,
  applyMiddleware(middleware, thunkMiddleware, logger),
);

const persistor = persistStore(store, null, () => {
  store.getState(); // if you want to get restoredState
});

// uncomment to clear the local storage
persistor.purge();

const Application = () => {
  return (
    <View style={{height: '100%', width: '100%'}}>
      <Provider store={store}>
        <ReduxRouter navigator={ReduxNavigator} />
      </Provider>
    </View>
  );
};

const App = Application;
// eventually add codepush...
// const App = codePush(Application);
export default App;
