import { IScreenController } from '../../types';
import {ActionConst, Actions} from 'react-native-router-flux';
import Auth_codebehind from '../../Services/Auth/Auth.codebehind';
import { AuthState } from '../../services/Auth/Auth.codebehind'; ;
//!!nextfileimport

export interface SplashState {
    // # give your component properties here
    VersionNumber: string;
    ScreenName: string;
    Count: number;

    // # code-gen below here
    AddCount(props: SplashState):void;
    HandleSignInPress(props: SplashState):void;
		//!!nextinterfacefunction
    Splash?:SplashState;
    Auth?:AuthState;
		//!!nextinterfaceconnection
}

export default class Splash_codebehind implements IScreenController {

    // # assign a default state 
    public CurrentState: SplashState = {
        VersionNumber: '0.0.1',
        ScreenName: 'Splash',
        Count: 0,
        AddCount : Splash_codebehind.AddCount,
        HandleSignInPress : Splash_codebehind.HandleSignInPress,
				//!!nextstatefunction
    }

    // ### put your codebehind-functions here - static functions implement business logic
    public static AddCount(state: SplashState, dispatch?: any): void {
      let NewState = state.Splash;
      if(NewState != undefined){
        NewState.Count += 1;
        // dispatch to parent store
          dispatch({
              type: 'Splash_Update',
              payload: {
                NewSettings: NewState,
              },
        });
      }
    }

    public static async HandleSignInPress(state: SplashState, dispatch?: any): Promise<void> {
			let NewState = state.Splash;
				if(NewState != undefined){
          // perform updates to the NewState object here (e.g. NewState.Count += 1; )
          try{
            await Auth_codebehind.HandleSignInPress(state.Auth as AuthState, dispatch);
            dispatch({type: 'Splash_Update',payload: {NewSettings: NewState}})
            Actions.reset('TabHome');
          }catch(e){
            // first try to acquire token silently in case the user was already logged in 
            try{
              await Auth_codebehind.AcquireTokenSilent(state.Auth as AuthState, dispatch);
              dispatch({type: 'Splash_Update',payload: {NewSettings: NewState}})
              Actions.Home();
            }catch(silentSignInE){
              // dispatch an action to show an error message on the splash screen
              console.error(e)
            }
          }
				}
			}
			//!!nextfunction


    /*******************************  %100 code-gen below here   *******************************/
    // constructor
    public Splash_codebehind(state: SplashState){
        this.CurrentState = state;
    }

    // listen to Update_Splash dispatches
    public reducer = (state = this.CurrentState, action: any = {type: {}, payload: {}}) => {
        switch (action.type) {
          case 'Splash_Update':
            return {...action.payload.NewSettings};
          default:
            return state;
        }
      };

      // make functions available to the front-end
      public mapDispatchToProps = (dispatch: any) => {
        return {
          AddCount: (state: SplashState) => {Splash_codebehind.AddCount(state, dispatch)},
          HandleSignInPress: async (state: SplashState) => {await Splash_codebehind.HandleSignInPress(state, dispatch)},
					//!!nextdispatchprop 
        }
      }

      // ### connect to the SessionStore here (as little as possible for performance)
      public mapStateToProps = (SessionStore: any, ownProps: any) => {
          return {
            Splash: SessionStore.Splash,
              Auth: SessionStore.Auth,
						//!!nextsessionstoreconnection
          }
      }
}