import IScreenController from '../../types';
import {ActionConst, Actions} from 'react-native-router-flux';

export interface SplashState {
    // # put your component's state here
    VersionNumber: string;
    ScreenName: string;
    Count: number;
}

export default class Splash_codebehind implements IScreenController {

    // ### put your component default state here 
    public CurrentState: SplashState = {
        VersionNumber: '0.0.1',
        ScreenName: 'Splash',
        Count: 0
    }

    // ### connect to the SessionStore here (as little as possible for performance)
    public mapStateToProps = (SessionStore: any, ownProps: any) => {
        return {
            Splash: SessionStore.Splash,
            root: SessionStore.root,
        }
    }

    // ### put your codebehind-functions here - static functions implement business logic
    public static AddCount(state: SplashState, dispatch: any): void {
        let NewState = state;
        NewState.Count += 1;
        // dispatch to parent store
          dispatch({
              type: 'Splash_Update',
              payload: {
                NewSettings: Splash_codebehind.AddCount(state, dispatch),
              },
            });
      }

    // constructor
    public Splash_codebehind(state: SplashState){
        this.CurrentState = state;
    }

    // listen to Update_Splash dispatches
    public reducer = (state = this.CurrentState, action: any = {type: {}, payload: {}}) => {
        switch (action.type) {
          case 'Splash_Update':
            return {...action.payload.NewSettings};
          default:
            return state;
        }
      };

      // make functions available to the front-end
      public mapDispatchToProps = (dispatch: any) => {
        return {
          AddCount: (state: SplashState) => {
            dispatch({
              type: 'Splash_Update',
              payload: {
                NewSettings: Splash_codebehind.AddCount(state, dispatch),
              },
            });
          } 
        }
      }
}