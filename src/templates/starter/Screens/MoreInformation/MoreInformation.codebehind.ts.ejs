import { IScreenController } from '../../types';
import {ActionConst, Actions} from 'react-native-router-flux';
//!!nextfileimport

export interface MoreInformationState {
    // # give your component properties here
    VersionNumber: string;
    ScreenName: string;
    Count: number;

    // # code-gen below here
    AddCount(props: MoreInformationState):void;
    //!!nextinterfacefunction
    MoreInformation?:MoreInformationState;
    //!!nextinterfaceconnection
}

export default class MoreInformation_codebehind implements IScreenController {

    // # assign a default state 
    public CurrentState: MoreInformationState = {
        VersionNumber: '0.0.1',
        ScreenName: 'MoreInformation',
        Count: 0,
        AddCount : MoreInformation_codebehind.AddCount,
        //!!nextstatefunction
    }

    // ### put your codebehind-functions here - static functions implement business logic
    public static AddCount(state: MoreInformationState, dispatch?: any): void {
      let NewState = state.MoreInformation;
      if(NewState != undefined){
        NewState.Count += 1;
        // dispatch to parent store
          dispatch({
              type: 'MoreInformation_Update',
              payload: {
                NewSettings: NewState,
              },
        });
      }
    }
    //!!nextfunction


    /*******************************  %100 code-gen below here   *******************************/
    // constructor
    public MoreInformation_codebehind(state: MoreInformationState){
        this.CurrentState = state;
    }

    // listen to Update_MoreInformation dispatches
    public reducer = (state = this.CurrentState, action: any = {type: {}, payload: {}}) => {
        switch (action.type) {
          case 'MoreInformation_Update':
            return {...action.payload.NewSettings};
          default:
            return state;
        }
      };

      // make functions available to the front-end
      public mapDispatchToProps = (dispatch: any) => {
        return {
          AddCount: (state: MoreInformationState) => {MoreInformation_codebehind.AddCount(state, dispatch)},
          //!!nextdispatchprop 
        }
      }

      // ### connect to the SessionStore here (as little as possible for performance)
      public mapStateToProps = (SessionStore: any, ownProps: any) => {
          return {
            MoreInformation: SessionStore.MoreInformation,
              //!!nextsessionstoreconnection
          }
      }
}