import { IScreenController } from '../../types';
import {ActionConst, Actions} from 'react-native-router-flux';
import B2CClient, { B2CConfiguration } from '../../util/b2cClient';
import React from 'react';
import { MSALResult, MSALWebviewParams } from 'react-native-msal/lib/typescript/src/types';
import { b2cConfig, b2cScopes as scopes } from '../../msalConfig';
//!!nextfileimport

// these lines set up helpers for the msal lib
// const [iosEphemeralSession, setIosEphemeralSession] = React.useState(false);
const webviewParameters: MSALWebviewParams = {};

export interface AuthState {
    // # give your component properties here
    VersionNumber: string;
    ScreenName: string;
    MSAL: MSALResult;

    // # code-gen below here
    HandleSignInPress(props: AuthState):void;
		AcquireTokenSilent(props: AuthState):void;
		HandleSignOutPress(props: AuthState):void;
		//!!nextinterfacefunction
    Auth?:AuthState;
    //!!nextinterfaceconnection
}

export default class Auth_codebehind implements IScreenController {

    static  b2cClient = new B2CClient(b2cConfig);

    // # assign a default state 
    public CurrentState: AuthState = {
        VersionNumber: '0.0.1',
        ScreenName: 'Auth',
        MSAL: {} as MSALResult,
        HandleSignInPress : Auth_codebehind.HandleSignInPress,
				AcquireTokenSilent : Auth_codebehind.AcquireTokenSilent,
				HandleSignOutPress : Auth_codebehind.HandleSignOutPress,
				//!!nextstatefunction
    }

    // ### put your codebehind-functions here - static functions implement business logic
    public static async HandleSignInPress(state: AuthState, dispatch?: any): Promise<void> {
        // perform updates to the NewState object here (e.g. NewState.Count += 1; )
        const res = await Auth_codebehind.b2cClient.signIn({ scopes, webviewParameters });
        state.MSAL = res;     
				dispatch({type: 'Auth_Update',payload: {NewSettings: state}})
    }
    
			public static async AcquireTokenSilent(state: AuthState, dispatch?: any): Promise<void> {
        const res = await Auth_codebehind.b2cClient.acquireTokenSilent({ scopes });
        state.MSAL = res;     
				dispatch({type: 'Auth_Update',payload: {NewSettings: state}})
      }
      
			public static async HandleSignOutPress(state: AuthState, dispatch?: any): Promise<void> {
        const res = await Auth_codebehind.b2cClient.signOut();
        state.MSAL = {} as MSALResult;
				dispatch({type: 'Auth_Update',payload: {NewSettings: state}})
			}
			//!!nextfunction


    /*******************************  %100 code-gen below here   *******************************/
    // constructor
    public Auth_codebehind(state: AuthState){
        this.CurrentState = state;
    }

    // listen to Update_Auth dispatches
    public reducer = (state = this.CurrentState, action: any = {type: {}, payload: {}}) => {
        switch (action.type) {
          case 'Auth_Update':
            return {...action.payload.NewSettings};
          default:
            return state;
        }
      };

      // make functions available to the front-end
      public mapDispatchToProps = (dispatch: any) => {
        return {
          HandleSignInPress: async (state: AuthState) => {Auth_codebehind.HandleSignInPress(state, dispatch)},
					AcquireTokenSilent: async (state: AuthState) => {Auth_codebehind.AcquireTokenSilent(state, dispatch)},
					HandleSignOutPress: async (state: AuthState) => {Auth_codebehind.HandleSignOutPress(state, dispatch)},
					//!!nextdispatchprop 
        }
      }

    // ### connect to the SessionStore here (as little as possible for performance)
    public mapStateToProps = (SessionStore: any, ownProps: any) => {
        return {
            Auth: SessionStore.Auth,
            //!!nextsessionstoreconnection
        }
    }
}