import { IScreenController } from '../../types';
import {ActionConst, Actions} from 'react-native-router-flux';
//!!nextfileimport

export interface AuthState {
    // # give your component properties here
    VersionNumber: string;
    ScreenName: string;
    Count: number;

    // # code-gen below here
    AddCount(props: AuthState):void;
    //!!nextinterfacefunction
    Auth?:AuthState;
    //!!nextinterfaceconnection
}

export default class Auth_codebehind implements IScreenController {

    // # assign a default state 
    public CurrentState: AuthState = {
        VersionNumber: '0.0.1',
        ScreenName: 'Auth',
        Count: 0,
        AddCount : Auth_codebehind.AddCount,
        //!!nextstatefunction
    }

    // ### put your codebehind-functions here - static functions implement business logic
    public static AddCount(state: AuthState, dispatch?: any): void {
      let NewState = state.Auth;
      if(NewState != undefined){
        NewState.Count += 1;
        // dispatch to parent store
          dispatch({
              type: 'Auth_Update',
              payload: {
                NewSettings: NewState,
              },
        });
      }
    }
    //!!nextfunction


    /*******************************  %100 code-gen below here   *******************************/
    // constructor
    public Auth_codebehind(state: AuthState){
        this.CurrentState = state;
    }

    // listen to Update_Auth dispatches
    public reducer = (state = this.CurrentState, action: any = {type: {}, payload: {}}) => {
        switch (action.type) {
          case 'Auth_Update':
            return {...action.payload.NewSettings};
          default:
            return state;
        }
      };

      // make functions available to the front-end
      public mapDispatchToProps = (dispatch: any) => {
        return {
          AddCount: (state: AuthState) => {Auth_codebehind.AddCount(state, dispatch)},
          //!!nextdispatchprop 
        }
      }

    // ### connect to the SessionStore here (as little as possible for performance)
    public mapStateToProps = (SessionStore: any, ownProps: any) => {
        return {
            Auth: SessionStore.Auth,
            //!!nextsessionstoreconnection
        }
    }
}