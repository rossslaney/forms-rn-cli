import { IScreenController } from '../../types';
import {ActionConst, Actions} from 'react-native-router-flux';
//!!nextfileimport

export interface HeaderState {
    // # give your component properties here
    VersionNumber: string;
    ScreenName: string;
    Count: number;

    // # code-gen below here
    AddCount(props: HeaderState):void;
    //!!nextinterfacefunction
    Header?:HeaderState;
    //!!nextinterfaceconnection
}

export default class Header_codebehind implements IScreenController {

    // # assign a default state 
    public CurrentState: HeaderState = {
        VersionNumber: '0.0.1',
        ScreenName: 'Header',
        Count: 0,
        AddCount : Header_codebehind.AddCount,
        //!!nextstatefunction
    }

    // ### put your codebehind-functions here - static functions implement business logic
    public static async AddCount(state: HeaderState, dispatch?: any): Promise<HeaderState> {
      if(state.Header == undefined)
        state.Header = new Header_codebehind().CurrentState;
      // the new codebehind state that this function will dispatch by default
      let NewState:HeaderState = state.Header;
      // ** perform operations on the NewState here **
      // ** you can dispatch to any of the connected codebehind stores **  
      NewState.Count += 1;

      // ** 
      // dispatch to the store - if dispatch variable is provided 
      if(dispatch != undefined)
        dispatch({ type: 'Header_Update', payload: { NewSettings: NewState } });
      
      return NewState;
    }
    //!!nextfunction


    /*******************************  %100 code-gen below here   *******************************/
    // constructor
    public Header_codebehind(state: HeaderState){
        this.CurrentState = state;
    }

    // listen to Update_Header dispatches
    public reducer = (state = this.CurrentState, action: any = {type: {}, payload: {}}) => {
        switch (action.type) {
          case 'Header_Update':
            return {...action.payload.NewSettings};
          default:
            return state;
        }
      };

      // make functions available to the front-end
      public mapDispatchToProps = (dispatch: any) => {
        return {
          AddCount: async (state: HeaderState) => {await Header_codebehind.AddCount(state, dispatch)} 
          //!!nextdispatchprop 
        }
      }

      // ### connect to the SessionStore here (as little as possible for performance)
      public mapStateToProps = (SessionStore: any, ownProps: any) => {
          return {
            Header: SessionStore.Header,
              //!!nextsessionstoreconnection
          }
      }
}